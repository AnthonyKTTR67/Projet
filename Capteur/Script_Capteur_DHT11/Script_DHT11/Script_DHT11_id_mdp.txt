#include <DHT.h>
#include <SPI.h>
#include <Ethernet.h>

// Configuration du DHT11
#define DHTPIN 3                  // Définition de la broche de connexion du capteur DHT11
#define DHTTYPE DHT11             // Définition du type de capteur (DHT11)
DHT dht(DHTPIN, DHTTYPE);         // Initialisation du capteur DHT11

// Configuration du réseau Ethernet
byte mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x6F, 0x4D };  // Adresse MAC unique pour l’Ethernet Shield
IPAddress ip(10, 129, 251, 1);                       // Adresse IP de l’Arduino
EthernetServer server(1904);                         // Création d'un serveur HTTP sur le port 1904

// Identifiants pour l'authentification
const char* username = "adminlocal";                      // Nom d'utilisateur
const char* password = "CH3-COOH";                   // Mot de passe

void setup() {
  Serial.begin(9600);            // Initialisation de la communication série pour le débogage
  Serial.println("Initialisation...");
  dht.begin();                   // Initialisation du capteur DHT11
  Serial.println("Capteur DHT initialisé.");

  // Initialisation de l’Ethernet Shield avec l'adresse MAC et l'adresse IP
  Ethernet.begin(mac, ip);
  server.begin();                // Démarrage du serveur

  Serial.print("Serveur démarré sur IP : ");
  Serial.println(Ethernet.localIP()); // Affichage de l'adresse IP du serveur dans le moniteur série
}

void loop() {
  float temp = dht.readTemperature(); // Lecture de la température depuis le capteur DHT11
  
  // Vérifier si la lecture du capteur a échoué
  if (isnan(temp)) {
    Serial.println("Échec de la lecture du capteur DHT11 !");
  } else {
    // Afficher la température dans le moniteur série
    Serial.print("Température: ");
    Serial.print(temp);
    Serial.println(" °C");
  }

  // Vérifier si un client est connecté
  EthernetClient client = server.available();
  if (client) {
    Serial.println("Client connecté !");
    bool authenticated = false;

    // Lire la requête HTTP envoyée par le client
    String request = client.readStringUntil('\n');
    Serial.println(request);

    // Vérifier la présence de l'en-tête d'authentification
    if (request.indexOf("Authorization: Basic") >= 0) {
      // Extraire les informations d'identification
      int start = request.indexOf("Basic ") + 6;
      String encodedAuth = request.substring(start);
      encodedAuth.trim();

      // Décoder l'authentification encodée en Base64
      String correctAuth = String(username) + ":" + String(password);
      String encodedCorrectAuth = base64Encode(correctAuth);

      // Comparer avec les identifiants corrects
      if (encodedAuth == encodedCorrectAuth) {
        authenticated = true;
      }
    }

    // Si l'utilisateur est authentifié
    if (authenticated) {
      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: text/html; charset=UTF-8");
      client.println("Connection: close");
      client.println();

      // Génération du contenu HTML
      client.println("<html><head><title>Données du capteur DHT11</title></head><body>");
      client.println("<h1>Données du capteur DHT11</h1>");
      client.print("<p>Il fait actuellement ");
      client.print(temp);
      client.println(" °C dans la salle serveur du lycée Louis COUFFIGNAL</p>");
      client.println("</body></html>");
    } else {
      // Si l'utilisateur n'est pas authentifié, renvoyer un en-tête 401 Unauthorized
      client.println("HTTP/1.1 401 Unauthorized");
      client.println("WWW-Authenticate: Basic realm=\"Protected Area\"");
      client.println("Content-Type: text/html");
      client.println("Connection: close");
      client.println();
      client.println("<html><body><h1>401 Unauthorized</h1></body></html>");
    }

    delay(1); // Pause pour s'assurer que le client a bien reçu les données
    client.stop(); // Déconnexion du client
    Serial.println("Client déconnecté.");
  }

  delay(1000); // Attente d'une seconde avant la prochaine lecture du capteur
}

// Fonction pour encoder une chaîne en Base64
String base64Encode(String input) {
  const char base64Chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  String encoded = "";
  int val = 0, valb = -6;
  for (unsigned char c : input) {
    val = (val << 8) + c;
    valb += 8;
    while (valb >= 0) {
      encoded += base64Chars[(val >> valb) & 0x3F];
      valb -= 6;
    }
  }
  if (valb > -6) encoded += base64Chars[((val << 8) >> (valb + 8)) & 0x3F];
  while (encoded.length() % 4) encoded += '=';
  return encoded;
}
